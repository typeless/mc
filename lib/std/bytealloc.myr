use sys

use "die"
use "extremum"
use "memops"
use "syswrap"
use "threadhooks"
use "types"
use "units"
use "result"
use "slfill"
use "backtrace"

pkg std =
	const startalloctrace	: (f : byte[:] -> void)
	const endalloctrace	: (-> void)

	const bytealloc		: (sz:size -> byte#)
	const zbytealloc	: (sz:size -> byte#)
	const bytefree		: (m:byte#, sz:size -> void)

	generic escape		: (f : (-> @b) ->  @b)
	generic region		: (a : @a, f : (a : @a -> @b) ->  @b)

	/* null pointers. only used internally. */
	pkglocal const Zslicep	= (0 : byte#)
	pkglocal const Align	= 16	/* minimum allocation alignment */

	pkglocal const align	: (m : std.size, align : std.size -> std.size)
	pkglocal const allocsz	: (sz : std.size -> std.size)

;;

const Zslab	= (0 : slab#)
const Zchunk	= (0 : chunk#)
const Slabsz 	= 512*KiB
const Cachemax	= 4
const Bktmax	= 128*KiB	/* a balance between wasted space and falling back to mmap */
const Pagesz	= 4*KiB

var trace	: bool
var tracefd	: std.fd

type bucket = struct
	sz	: size	/* aligned size */
	nper	: size	/* max number of elements per slab */
	slabs	: slab#	/* partially filled or free slabs */
	cache	: slab# /* cache of empty slabs, to prevent thrashing */
	rest	: slab# /* full slabs */
	ncache	: size  /* size of cache */
;;

type slab = struct
	head	: byte#	/* head of virtual addresses, so we don't leak address space */
	next	: slab#	/* the next slab on the chain */
	prev	: slab#	/* the prev slab on the chain */
	freehd	: chunk#	/* the nodes we're allocating */
	nfree	: size	/* the number of free nodes */
	magic	: size	/* ensure we didn't index into the void */
;;

/* NB: must be smaller than sizeof(slab) */
type chunk = struct
	next	: chunk#	/* the next chunk in the free list */
;;

type cacheelt = struct
	sz	: std.size
	p	: byte#
;;

const __init__ = {
	var r : region#

	bktinit(&metabucket, sizeof(region))
	top = (bktalloc(&metabucket) : region#)
	top.vptr.fini = {a : void# -> void; bonwickfini((a : bonwick#))}
	top.vptr.nextp = bonwicknext
	top.data = (&base : void#)
	bonwickinit(&base)
}

const startalloctrace = {path
	match openmode(path, Owrite | Ocreat, 0o644)
	| `Ok fd:	tracefd = fd
	| `Err e:	-> void
	;;
	trace = true
}

const endalloctrace = {
	std.close(tracefd)
	trace = false
}

const zbytealloc = {sz
	var p

	p = bytealloc(sz)
	memfill(p, 0, sz)
	-> p
}

const tracealloc = {p, sz
	var stk	: void#[23]	/* [type, addr, sz, 10 stack slots] */

	slfill(stk[:], (0 : void#))
	stk[0] = (0 : void#)
	stk[1] = (p : void#)
	stk[2] = (sz : void#)
	backtrace(stk[3:])
	writealloctrace(stk[:])
}

const tracefree = {p, sz
	var stk	: void#[3]

	stk[0] = (1 : void#)
	stk[1] = (p : void#)
	stk[2] = (sz : void#)
	writealloctrace(stk[:])
}

const writealloctrace = {sl
	var len, p

	len = sl.len * sizeof(void#)
	p = (sl : byte#)
	write(tracefd, p[:len])
}

var top		: region#
var metabucket	: bucket
var base	: bonwick

const bonwicknext = {a : void# -> void##
	var b : bonwick#
	var r : region#
	
	b = (a : bonwick#)
	r = &b.region
	-> (&r.next : void##)
}

const bonwickinit = {a : bonwick# -> void
	for var i = 0; i < a.buckets.len && (Align << i) <= Bktmax; i++
		bktinit(&a.buckets[i], Align << i)
	;;
}

const bonwickfini = {a : bonwick# -> void
	var b : bucket#
	var t : slab#

	for var i = 0; i < a.buckets.len; i++
		if a.buckets[i].sz == 0
			continue
		;;

		b = &a.buckets[i]
		for s : [b.cache, b.slabs, b.rest][:]
			while s != Zslab
				t = s
				s = s.next
				freemem(t.head, Slabsz*2)
			;;
		;;
	;;

	for var i = 0; i < a.bigcache.len; i++
		if a.bigcache[i].sz > 0
			freemem(a.bigcache[i].p, a.bigcache[i].sz)
		;;
	;;
}

const fini = {a : void# -> void 
	bonwickfini((a : bonwick#))
}

trait allocable @a =
	vptr	: vtab#
;;

impl allocable bonwick# =
	vptr	= &[
		.fini	= (0 : (a : void# -> void)),
		.nextp	= bonwicknext,
	]
;;

type vtab = struct
	fini	: (a : void# -> void)
	nextp	: (a : void# -> void##)
;;

type region = struct
	vptr	: vtab#
	data	: void#
	next	: region#
;;

type bonwick = struct
	region	: region
	buckets : bucket[32]
	bigcache: cacheelt[32]
;;

generic escape = {f : (-> @b) -> @b
	var r : region#
	var p : region#
	var v : @b

	r = top
	p = (top.vptr.nextp(top.data)# : region#)
	top = p != (0 : region#) ? p : top
	v = f()
	top = r
	-> v
}

generic region = {a : @a, f : (a : @a -> @b) -> @b
	var r : region#
	var p : void#
	var v : @b

	p = (a : void#)
	r.data = p
	r.vptr = impl(vptr, @a)
	r.vptr.nextp(p)# = (top : void#)
	top = r

	v = f(a)

	top = (r.vptr.nextp(p)# : region#)
	r.vptr.fini(p)
	-> v
}

/* Allocates a blob that is 'sz' bytes long. Dies if the allocation fails */
const bytealloc = {sz
	var bkt, p
	var a : bonwick#

	a = (top.data : bonwick#)

	if sz <= Bktmax
		bkt = &a.buckets[bktnum(sz)]
		lock(memlck)
		p = bktalloc(bkt)
		unlock(memlck)
	else
		p = bigalloc(sz)
	;;
	if trace
		lock(memlck)
		tracealloc(p, sz)
		unlock(memlck)
	;;
	-> p
}

/* frees a blob that is 'sz' bytes long. */
const bytefree = {p, sz
	var bkt
	var a : bonwick#

	if p == (0 : byte#)
		-> void
	;;
	if trace
		lock(memlck)
		tracefree(p, sz)
		unlock(memlck)
	;;
	memfill(p, 0xa8, sz)
	if (sz < Bktmax)
		a = (top.data : bonwick#)
		bkt = &a.buckets[bktnum(sz)]
		lock(memlck)
		bktfree(bkt, p)
		unlock(memlck)
	else
		bigfree(p, sz)
	;;
}

const bigalloc = {sz
	var bigcache
	var p
	var a : bonwick#

	a = (top.data : bonwick#)
	bigcache = a.bigcache[:]
	p = Failmem
	/*
	 We need to round up to the page size so that unmapping
	 doesn't end up taking out the tail of another allocation.
	*/
	sz = align(sz, Pagesz)

	/* check our cache */
	lock(memlck)
	for var i = 0; i < bigcache.len; i++
		if sz < bigcache[i].sz
			/*
			While the allocator may never use a small chunk, we need
			to keep it together so when unmapping it in the free call,
			end up unmapping the whole thing. We can't return a larger
			size here than requested, because we don't track the size.

			Eviction takes care of freeing it.
			*/
			p = bigcache[i].p
			bigcache[i].sz -= sz
			bigcache[i].p = ((p : intptr) + (sz : intptr) : byte#)
			break
		;;
	;;
	unlock(memlck)
	if p != Failmem
		-> p
	;;

	/* ok, lets give up and get memory from the os */
	p = getmem(sz)
	if p != Failmem
		-> p
	;;
	die("could not get memory\n")
}

const bigfree = {p, sz
	var bigcache
	var evictsz, evictp, evictidx
	var endp, endblk
	var a : bonwick#

	a = (&top.data : bonwick#)
	bigcache = a.bigcache[:]
	sz = align(sz, Pagesz)
	evictp = p
	evictidx = -1
	evictsz = sz
	endp = ((p : intptr) + (sz : intptr) : byte#)
	lock(memlck)
	for var i = 0; i < bigcache.len; i++
		endblk = ((bigcache[i].p : intptr) + (bigcache[i].sz : intptr) : byte#)
		/* merge in front of existing block */
		if bigcache[i].p == endp
			bigcache[i].sz += sz
			bigcache[i].p = p
			evictidx = -1
			evictsz = 0
			break
		/* merge in behind existing block */
		elif endblk == p
			bigcache[i].sz += sz
			evictidx = -1
			evictsz = 0
			break
		;;
		/* evict */
		if bigcache[i].sz < evictsz
			evictidx = i
			evictsz = bigcache[i].sz
			evictp = bigcache[i].p
		;;
	;;

	if evictidx != -1
		bigcache[evictidx].p = p
		bigcache[evictidx].sz = sz
	;;
	unlock(memlck)

	/*
	  Now that we've removed it, we can
	  free it. It's not in the cache, so
	  we don't need the lock held.
	 */
	if evictsz > 0
		freemem(evictp, evictsz)
	;;
}

/* Sets up a single empty bucket */
const bktinit = {b, sz
	b.sz = align(sz, Align)
	b.nper = (Slabsz - sizeof(slab))/b.sz
	b.slabs = Zslab
	b.cache = Zslab
	b.ncache = 0
}

/* Creates a slab for bucket 'bkt', and fills the chunk list */
const mkslab = {bkt
	var p, s
	var b, bnext
	var off /* offset of chunk head */

	if bkt.ncache > 0
		s = bkt.cache
		bkt.cache = s.next
		bkt.ncache--
		s.next = Zslab
		-> s
	;;

	/*
	tricky: we need power of two alignment, so we allocate double the
	needed size, chop off the unaligned ends, and waste the address
	space. Since the OS is "smart enough", this shouldn't actually
	cost us memory, and 64 bits of address space means that we're not
	going to have issues with running out of address space for a
	while. On a 32 bit system this would be a bad idea.
	*/
	p = getmem(Slabsz*2)
	if p == Failmem
		die("Unable to get memory")
	;;

	b = Zchunk
	s = (align((p : size), Slabsz) : slab#)
	s.head = p
	s.nfree = bkt.nper
	s.next = Zslab
	s.prev = Zslab
	s.magic = 0xfee1baff1ed
	/* skip past the slab header */
	off = align(sizeof(slab), Align)
	bnext = nextchunk((s : chunk#), off)
	s.freehd = bnext

	if bkt.nper == 0
		write(1, [('A' : byte), ('#' : byte), ('1' : byte), ('\n' : byte)][:])
		suicide()
	;;

	for var i = 0; i < bkt.nper; i++
		b = bnext
		if bnext < (s : chunk#) || (bnext : size) > align((s : size)+1, Slabsz)
			write(1, [('e' : byte), ('r' : byte), ('r' : byte), ('\n' : byte)][:])
			suicide()
		;;
		bnext = nextchunk(b, bkt.sz)
		b.next = bnext
	;;
	b.next = Zchunk
	-> s
}

/* 
Allocates a node from bucket 'bkt', crashing if the
allocation cannot be satisfied. Will create a new slab
if there are no slabs on the freelist.
*/
const bktalloc = {bkt
	var s, c

	/* find a slab */
	s = bkt.slabs
	if s == Zslab
		s = mkslab(bkt)
		bkt.slabs = s
		if s == Zslab
			die("No memory left")
		;;
	;;

	/* grab the first chunk on the slab */
	c = s.freehd
	s.freehd = c.next
	s.nfree--
	if s.freehd == Zchunk
		bkt.slabs = s.next
		if s.next != Zslab
			s.next.prev = Zslab
		;;
		s.next = bkt.rest
		s.prev = Zslab
		bkt.rest = s
	;;
	-> (c : byte#)
}

/*
Frees a chunk of memory 'm' into bucket 'bkt'.
Assumes that the memory already came from a slab
that was created for bucket 'bkt'. Will crash
if this is not the case.
*/
const bktfree = {bkt, m
	var s, c

	s = (mtrunc(m, Slabsz) : slab#)
	iassert(s.magic == 0xfee1baff1ed, "bad free")
	c = (m : chunk#)
	if s.nfree == 0
		if s.next != Zslab
			s.next.prev = s.prev
		;;
		if s.prev != Zslab
			s.prev.next = s.next
		;;
		if bkt.rest == s
			bkt.rest = s.next
		;;

		if bkt.slabs != Zslab
			bkt.slabs.prev = s
		;;
		s.next = bkt.slabs
		s.prev = Zslab
		bkt.slabs = s
	elif s.nfree == bkt.nper - 1
		/* unlink the slab from the list */
		if s.next != Zslab
			s.next.prev = s.prev
		;;
		if s.prev != Zslab
			s.prev.next = s.next
		;;
		if bkt.slabs == s
			bkt.slabs = s.next
		;;
		/*
		HACK HACK HACK: if we can't unmap, keep an infinite cache per slab size.
		We should solve this better somehow.
		*/
		if bkt.ncache < Cachemax || !Canunmap
			s.next = bkt.cache
			s.prev = Zslab
			bkt.cache = s
			bkt.ncache++
		else
			/* we mapped 2*Slabsz so we could align it,
			 so we need to unmap the same */
			freemem(s.head, Slabsz*2)
		;;
		-> void
	;;
	s.nfree++
	c.next = s.freehd
	s.freehd = c
}

/*
Finds the correct bucket index to allocate from
for allocations of size 'sz'
*/
const bitpos : byte[32] = [
  0, 9, 1, 10, 13, 21, 2, 29, 11, 14, 16, 18, 22, 25, 3, 30,
  8, 12, 20, 28, 15, 17, 24, 7, 19, 27, 23, 6, 26, 5, 4, 31
]
const bktnum = {sz
	var n, v

	v = sz > 0 ? ((sz - 1) >> 3 : uint32) : 0
	v |= v >> 1
	v |= v >> 2
	v |= v >> 4
	v |= v >> 8
	v |= v >> 16

	n = bitpos[((v * 0x07c4acdd) & 0xffff_ffffui) >> 27]
	-> (n : size)
}

/*
returns the actual size we allocated for a given
size request
*/
const allocsz = {sz
	var bktsz

	if sz <= Bktmax
		bktsz = Align
		for var i = 0; bktsz <= Bktmax; i++
			if bktsz >= sz
				-> bktsz
			;;
			bktsz *= 2
		;;
	else
		-> align(sz, Pagesz)
	;;
	die("Size does not match any buckets")
}

/*
aligns a size to a requested alignment.
'align' must be a power of two
*/
const align = {v, align
	-> (v + align - 1) & ~(align - 1)
}

/*
chunks are variable sizes, so we can't just
index to get to the next one
*/
const nextchunk = {b, sz : size
	-> ((b : intptr) + (sz : intptr) : chunk#)
}

/*
truncates a pointer to 'align'. 'align' must
be a power of two.
*/
const mtrunc = {m, align
	-> ((m : intptr) & ~((align : intptr) - 1) : byte#)
}

const dbg = {msg : byte[:], v
	write(1, msg)
	write(1, [(v%10+0x30 : byte)][:])
	write(1, [((v/10)%10+0x30 : byte)][:])
	write(1, [((v/100)%10+0x30 : byte)][:])
	write(1, [((v/1000)%10+0x30 : byte)][:])
	write(1, [((v/10000)%10+0x30 : byte)][:])
	write(1, [((v/100000)%10+0x30 : byte)][:])
	if v > 999999
		write(1, [('x' : byte)][:])
	;;;
	write(1, [('\n' : byte)][:])
}
